#!/usr/bin/env ruby

require 'graph_tool'
require 'optparse'

formats = [:txt, :svg, :png, :jpg, :gif]
styles = [:circle, :cross, :manikin]
# defaults:
options = { type: :svg, style: :circle }

OptionParser.new do |opts|
  opts.banner = 'Usage: bin/graph_tool [options]'
  opts.on('-d DATA',
          '--data DATA',
          Array,
          "Provide multiple data points, ie: 'bin/graph_tool -d Red:8,Gold:7'"
         ) do |data|
    options[:data] = data.map { |d| d.split(':') }.to_h
  end
  opts.on('-f FILENAME',
          '--filename FILENAME',
          "Set the filename the result is stored in. Supported formats are: : #{formats.join(', ')}"
         ) do |filename|
    options[:filename] = filename
  end
  opts.on('-s STYLE',
          '--style STYLE',
          styles,
          "Choose the graph style: #{styles.join(', ')}"
         ) do |style|
    options[:style] = style
  end
  opts.on('-c COLUMNS',
          '--columns COLUMNS',
          Integer,
          'Set number of columns'
         ) do |columns|
    options[:columns] = columns
  end
  opts.on('-w WIDTH',
          '--item-width WIDTH',
          Integer,
          'Sets the width of the individual item'
         ) do |item_width|
    options[:item_width] = item_width
  end
  opts.on('-h HEIGHT',
          '--item-height HEIGHT',
          Integer,
          'Sets the height of the individual item'
         ) do |item_height|
    options[:item_height] = item_height
  end
  opts.on('-t TYPE',
          '--type TYPE',
          formats,
          "If no filename is provided, output is sent to STDOUT, choose the format: #{formats.join(', ')}"
         ) do |type|
    options[:type] = type
  end
  opts.on('--help',
          'Prints this help'
         ) do
    puts opts
    exit
  end
end.parse!(ARGV.empty? ? ['--help'] : ARGV)

if options[:filename]
  type = options[:filename].match(/.*\.(#{formats.join("|")})/)
  if type
    options[:type] = type[1].to_sym
  else
    exit 1
  end
end

data = options[:data]
graph_options = options.select { |key, _value| [:filename, :type, :columns, :item_width, :item_height].include? key }

if data
  if options[:type] == :txt
    graph = GraphTool::SymbolCountGraph.new(data, graph_options)
  elsif [:svg, :png, :jpg, :gif].include? options[:type]
    if options[:style] == :circle
      graph = GraphTool::CircleCountGraph.new(data, graph_options)
    elsif options[:style] == :cross
      graph = GraphTool::CrossCountGraph.new(data, graph_options)
    elsif options[:style] == :manikin
      graph = GraphTool::ManikinCountGraph.new(data, graph_options)
    end
  end
  if options[:filename]
    graph.render
  else
    puts graph.render
  end
end
